{"version":3,"sources":["../../src/models/Node.tsx","../../src/models/LinkedList.tsx","../../src/models/Slide.tsx","../../src/components/Carousel/Carousel.tsx","../../src/shims/document.ts","../../src/components/Slide/Slide.tsx","components/PeriodicElement/PeriodicElement.tsx","components/Tooltip/Tooltip.tsx","pages/MainPage/MainPage.tsx","pages/FeaturesPage/FeaturesPage.tsx","App.tsx","index.tsx"],"names":["Node","constructor","value","prev","next","this","LinkedList","Symbol","current","idx","newNode","length","popped","newTail","tail","shiftedNode","newHead","head","index","removedNode","after","getNodeAtIndex","before","currentIndex","currentNode","foundNode","Slide","id","item","element","classRemover","RegExp","whiteSpaceRemover","Carousel","props","theta","radius","cellsCount","moveRight","state","moveLeft","setSceneRef","node","setCarouselWrapperRef","setItemRef","handleLeftControlClick","handleRightControlClick","initialized","prevState","shallowEqualChildren","prevProps","setTimeout","shallowCompare","prevChildren","c","currChildren","slide","React","carouselWrapperRef","sceneRef","height","Children","Math","width","ResizeObserver","entries","list","cellAngle","getDocument","angle","centerNode","centerElement","counter","max","slideProps","key","ref","onClick","className","style","Component","PeriodicElement","backgroundColor","number","symbol","name","Tooltip","text","MainPage","handleChange","setState","currentElement","onSliderChange","event","elements","require","slice","showTooltip","href","onMouseEnter","onMouseLeave","summary","onChange","map","data","Slider","defaultValue","valueLabelDisplay","step","marks","min","to","FeaturesPage","App","basename","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c2b37ac.chunk.js","sourcesContent":["export default class Node {\r\n  value: any = null\r\n  prev: any = null\r\n  next: any = null\r\n\r\n  constructor(value: any) {\r\n    this.value = value\r\n    this.prev = null\r\n    this.next = null\r\n  }\r\n}\r\n","import Node from './Node'\r\n\r\nexport default class LinkedList implements Iterable<Node> {\r\n  public head: any\r\n  public tail: any\r\n  public length\r\n\r\n  constructor() {\r\n    this.head = null\r\n    this.tail = null\r\n    this.length = 0\r\n  }\r\n\r\n  *[Symbol.iterator]() {\r\n    let current = this.head\r\n    let idx = this.length\r\n\r\n    while (idx) {\r\n      yield current\r\n      current = current.next\r\n      idx--\r\n    }\r\n  }\r\n\r\n  push(val: any) {\r\n    const newNode = new Node(val)\r\n    if (!this.head) {\r\n      this.head = newNode\r\n      this.tail = newNode\r\n    } else {\r\n      this.tail.next = newNode\r\n      newNode.prev = this.tail\r\n      this.tail = newNode\r\n    }\r\n\r\n    this.length++\r\n    return this\r\n  }\r\n\r\n  connectTailWithHead() {\r\n    this.tail.next = this.head\r\n    this.head.prev = this.tail\r\n  }\r\n\r\n  pop() {\r\n    //in case of empty list\r\n    if (this.length === 0) {\r\n      return false\r\n    }\r\n    //get popped node\r\n    const popped = this.tail\r\n    //save newTail to a variable (could be null)\r\n    const newTail = this.tail.prev\r\n    //if newTail is not null\r\n    if (newTail) {\r\n      //sever connection to popped node\r\n      newTail.next = null\r\n      //sever connection from popped node\r\n      this.tail.prev = null\r\n      //in case of 1 length list\r\n    } else {\r\n      //make sure to edit head in case newTail is null\r\n      this.head = null\r\n    }\r\n    //assign new tail (could be null)\r\n    this.tail = newTail\r\n    // subtract length\r\n    this.length--\r\n\r\n    return popped\r\n  }\r\n\r\n  shift() {\r\n    //in case list is empty\r\n    if (!this.head) {\r\n      return false\r\n    }\r\n    //save shifted node to variable\r\n    const shiftedNode = this.head\r\n    //make the new head the next (might be null)\r\n    const newHead = this.head.next //might be null\r\n    //if list is more than 1\r\n    if (this.head !== this.tail) {\r\n      newHead.prev = null\r\n      shiftedNode.next = null\r\n    } else {\r\n      this.tail = null\r\n    }\r\n    this.head = newHead\r\n    this.length--\r\n    return shiftedNode\r\n  }\r\n\r\n  unshift(val: any) {\r\n    const newNode = new Node(val)\r\n    if (!this.head) {\r\n      this.head = newNode\r\n      this.tail = newNode\r\n    } else {\r\n      this.head.prev = newNode\r\n      newNode.next = this.head\r\n      this.head = newNode\r\n    }\r\n    this.length++\r\n    return this\r\n  }\r\n\r\n  // insertAtIndex(index, val) {\r\n  //     //if index doesn't exist\r\n  //     if (index > this.length) {\r\n  //         return false;\r\n  //     }\r\n  //     if (index === 0) {\r\n  //         this.unshift(val);\r\n  //     } else if (index === this.length) {\r\n  //         this.push(val);\r\n  //     } else {\r\n  //         const newNode = new Node(val);\r\n  //         const after = this.accessAtIndex(index);\r\n  //         const before = after.prev;\r\n  //         after.prev = newNode;\r\n  //         before.next = newNode;\r\n  //         newNode.next = after;\r\n  //         newNode.prev = before;\r\n  //         this.length++;\r\n  //     }\r\n  //     return this;\r\n  // }\r\n\r\n  removeAtIndex(index: number) {\r\n    let removedNode\r\n    if (index >= this.length) {\r\n      return false\r\n    }\r\n    if (index == 0) {\r\n      removedNode = this.shift()\r\n    } else if (index == this.length - 1) {\r\n      removedNode = this.pop()\r\n    } else {\r\n      removedNode = this.getNodeAtIndex(index)\r\n      const after = removedNode.next\r\n      const before = removedNode.prev\r\n      removedNode.next = null\r\n      removedNode.prev = null\r\n      before.next = after\r\n      after.prev = before\r\n      this.length--\r\n    }\r\n    return removedNode\r\n  }\r\n\r\n  getNodeAtIndex(index: number) {\r\n    if (index >= this.length || index < 0) {\r\n      return false\r\n    }\r\n    let currentIndex = 0\r\n    let currentNode = this.head\r\n    while (currentIndex !== index) {\r\n      currentNode = currentNode.next\r\n      currentIndex++\r\n    }\r\n    return currentNode\r\n  }\r\n\r\n  setNodeAtIndex(index: number, val: any) {\r\n    const foundNode = this.getNodeAtIndex(index)\r\n    if (foundNode) {\r\n      foundNode.value = val\r\n      return foundNode\r\n    }\r\n    return null\r\n  }\r\n}\r\n","export default class Slide {\r\n  id: number = null\r\n  item: any = null\r\n  element: any = null\r\n\r\n  constructor(id: number, item: any, element: any) {\r\n    this.id = id\r\n    this.item = item\r\n    this.element = element\r\n  }\r\n}\r\n","import React, { Children } from 'react'\r\nimport shallowCompare from 'react-addons-shallow-compare'\r\n\r\nimport LinkedList from '../../models/LinkedList'\r\nimport Node from '../../models/Node'\r\nimport Slide from '../../models/Slide'\r\nimport getDocument from '../../shims/document'\r\n\r\nimport './Carousel.scss'\r\n\r\ndeclare var ResizeObserver: any\r\n\r\nconst classes = {\r\n  itemCurrent: 'x-current',\r\n  itemPast: 'x-prev',\r\n  itemFuture: 'x-next'\r\n}\r\n\r\nconst classRemover = new RegExp(\r\n  '\\\\b(' +\r\n    classes.itemCurrent +\r\n    '|' +\r\n    classes.itemPast +\r\n    '|' +\r\n    classes.itemFuture +\r\n    ')(.*?)(\\\\s|$)',\r\n  'g'\r\n)\r\n\r\nconst whiteSpaceRemover = new RegExp('\\\\s\\\\s+', 'g')\r\n\r\n// const noop = () => {}\r\n\r\ninterface Props {\r\n  cellSize?: number\r\n  autoPlay?: boolean\r\n  children?: React.ReactChild[]\r\n  useKeyboardArrows?: boolean\r\n  onChange?: (node: Node) => void\r\n}\r\n\r\ninterface State {\r\n  currentIndex: number\r\n  initialized: boolean\r\n}\r\n\r\nexport default class Carousel extends React.Component<Props, State> {\r\n  private carouselWrapperRef?: HTMLDivElement\r\n  private sceneRef?: HTMLDivElement\r\n  private resizeObserver: typeof ResizeObserver\r\n\r\n  list: LinkedList\r\n  theta: number = 0\r\n  radius: number = 0\r\n  cellsCount: number = 0\r\n\r\n  constructor(props: Props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      currentIndex: 0,\r\n      initialized: false\r\n    }\r\n\r\n    this.list = new LinkedList()\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ initialized: true })\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props, prevState: State) {\r\n    if (!prevState.initialized && this.state.initialized) {\r\n      this.setResizeListener()\r\n      this.calculateDimension()\r\n      this.changeCarousel()\r\n    }\r\n\r\n    if (!this.shallowEqualChildren(prevProps.children, this.props.children)) {\r\n      this.carouselWrapperRef.style.transition = 'transform 0s'\r\n      this.calculateDimension()\r\n      this.changeCarousel()\r\n      setTimeout(\r\n        () => (this.carouselWrapperRef.style.transition = 'transform 1s'),\r\n        0\r\n      )\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return shallowCompare(this.props.children, nextProps, nextState)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.destroyCarousel()\r\n  }\r\n\r\n  shallowEqualChildren(prevChildren, currChildren) {\r\n    const str1 = prevChildren.map((c) => c.key).join('')\r\n    const str2 = currChildren.map((c) => c.key).join('')\r\n\r\n    return str1 === str2\r\n  }\r\n\r\n  addNewNode(index, item) {\r\n    const slide = new Slide(index, item.props.data, React.createRef())\r\n    this.list.push(slide)\r\n  }\r\n\r\n  carouselWrapperRefExist() {\r\n    return (\r\n      this.carouselWrapperRef &&\r\n      this.carouselWrapperRef instanceof HTMLDivElement\r\n    )\r\n  }\r\n\r\n  calculateDimension() {\r\n    if (!this.sceneRef) return\r\n\r\n    const { width, height } = this.sceneRef.getBoundingClientRect()\r\n\r\n    this.cellsCount = Children.count(this.props.children) || 0\r\n    this.theta = 360 / this.cellsCount\r\n    this.radius = Math.round(width / 2 / Math.tan(Math.PI / this.cellsCount))\r\n  }\r\n\r\n  setResizeListener() {\r\n    this.resizeObserver = new ResizeObserver((entries: any) => {\r\n      entries.forEach(() => {\r\n        this.carouselWrapperRef.style.transition = 'transform 0s'\r\n        this.calculateDimension()\r\n        this.changeCarousel()\r\n        this.forceUpdate()\r\n        setTimeout(\r\n          () => (this.carouselWrapperRef.style.transition = 'transform 1s'),\r\n          0\r\n        )\r\n      })\r\n    })\r\n\r\n    this.resizeObserver.observe(this.sceneRef)\r\n  }\r\n\r\n  changeCarousel() {\r\n    if (!this.list.length) return\r\n\r\n    let currentNode = this.list.getNodeAtIndex(0)\r\n    while (true) {\r\n      const cellAngle = this.theta * currentNode.value.id\r\n      currentNode.value.element.style.transform =\r\n        'rotateY' + '(' + cellAngle + 'deg) translateZ(' + this.radius + 'px)'\r\n\r\n      if (currentNode.value.id === this.list.length - 1) break\r\n\r\n      currentNode = currentNode.next\r\n    }\r\n\r\n    this.rotateCarousel()\r\n  }\r\n\r\n  moveRight = () => {\r\n    this.setState(\r\n      (state, props) => {\r\n        return {\r\n          currentIndex: state.currentIndex + 1\r\n        }\r\n      },\r\n      () => {\r\n        this.rotateCarousel()\r\n      }\r\n    )\r\n  }\r\n\r\n  moveLeft = () => {\r\n    this.setState(\r\n      (state, props) => {\r\n        return {\r\n          currentIndex: state.currentIndex - 1\r\n        }\r\n      },\r\n      () => {\r\n        this.rotateCarousel()\r\n      }\r\n    )\r\n  }\r\n\r\n  bindEvents() {\r\n    if (this.props.useKeyboardArrows) {\r\n      getDocument().addEventListener('keydown', this.navigateWithKeyboard)\r\n    }\r\n  }\r\n\r\n  navigateWithKeyboard() {}\r\n\r\n  rotateCarousel() {\r\n    if (!this.carouselWrapperRefExist()) return\r\n\r\n    const angle = this.theta * this.state.currentIndex * -1\r\n    this.carouselWrapperRef.style.transform =\r\n      'translateZ(' + -this.radius + 'px) ' + 'rotateY' + '(' + angle + 'deg)'\r\n\r\n    //fix initial animation\r\n    setTimeout(\r\n      () => (this.carouselWrapperRef.style.transition = 'transform 1s'),\r\n      0\r\n    )\r\n\r\n    this.updateClassList()\r\n    this.props.onChange(this.getCurrentNode())\r\n  }\r\n\r\n  setSceneRef = (node: HTMLDivElement) => {\r\n    this.sceneRef = node\r\n  }\r\n\r\n  setCarouselWrapperRef = (node: HTMLDivElement) => {\r\n    this.carouselWrapperRef = node\r\n  }\r\n\r\n  setItemRef = (element: HTMLElement, index: number) => {\r\n    if (!element) return\r\n\r\n    const node = this.list.getNodeAtIndex(index)\r\n    node.value.element = element\r\n  }\r\n\r\n  getActualIndex() {\r\n    return Math.sign(this.state.currentIndex) < 0\r\n      ? this.list.length - Math.abs(this.state.currentIndex)\r\n      : this.state.currentIndex % this.list.length\r\n  }\r\n\r\n  getCurrentNode() {\r\n    const idx = this.getActualIndex()\r\n\r\n    return this.list.getNodeAtIndex(idx)\r\n  }\r\n\r\n  handleClickItem(node: Node, index: number) {}\r\n\r\n  handleLeftControlClick = () => {\r\n    this.moveLeft()\r\n  }\r\n\r\n  handleRightControlClick = () => {\r\n    this.moveRight()\r\n  }\r\n\r\n  removeExtraClasses(element: any) {\r\n    return (element.className = element.className\r\n      .replace(classRemover, '')\r\n      .replace(whiteSpaceRemover, ' '))\r\n  }\r\n\r\n  updateClassList() {\r\n    const centerNode = this.getCurrentNode()\r\n    const centerElement = centerNode.value.element\r\n\r\n    this.removeExtraClasses(centerElement)\r\n    centerElement.classList.add('x-current')\r\n\r\n    let counter = 0\r\n    const max = Math.floor(this.list.length / 2)\r\n    let currentNode = centerNode\r\n    while (counter < max) {\r\n      const element = currentNode.next.value.element\r\n      this.removeExtraClasses(element)\r\n      element.classList.add('x-next-' + counter)\r\n      currentNode = currentNode.next\r\n      counter++\r\n    }\r\n\r\n    counter = 0\r\n    currentNode = centerNode\r\n    while (counter < max) {\r\n      const element = currentNode.prev.value.element\r\n      this.removeExtraClasses(element)\r\n      element.classList.add('x-prev-' + counter)\r\n      currentNode = currentNode.prev\r\n      counter++\r\n    }\r\n  }\r\n\r\n  destroyCarousel() {\r\n    this.resizeObserver.unobserve(this.sceneRef)\r\n  }\r\n\r\n  //RENDER\r\n\r\n  renderItems() {\r\n    if (!this.props.children || !this.sceneRef) return\r\n\r\n    const { width, height } = this.sceneRef.getBoundingClientRect()\r\n    this.list = new LinkedList()\r\n    return Children.map(this.props.children, (item, index) => {\r\n      this.addNewNode(index, item)\r\n      if (index === this.props.children.length - 1) {\r\n        this.list.connectTailWithHead()\r\n      }\r\n\r\n      const slideProps = {\r\n        key: index,\r\n        ref: (element: HTMLDivElement) => this.setItemRef(element, index),\r\n        onClick: this.handleClickItem.bind(this, item, index),\r\n        className: 'x-carousel__slide',\r\n        style: { width: width + 'px', height: height + 'px' }\r\n      }\r\n\r\n      return <div {...slideProps}>{item}</div>\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='x-scene' ref={this.setSceneRef}>\r\n        <div className='x-carousel' ref={this.setCarouselWrapperRef}>\r\n          {this.renderItems()}\r\n        </div>\r\n        <div\r\n          className='x-scene-lcontrol'\r\n          onClick={this.handleLeftControlClick}\r\n        ></div>\r\n        <div\r\n          className='x-scene-rcontrol'\r\n          onClick={this.handleRightControlClick}\r\n        ></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export default () => document;","import React, { Children } from 'react'\r\n\r\nimport './Slide.scss'\r\n\r\ninterface Props {\r\n  data: any\r\n}\r\n\r\ninterface State {}\r\n\r\nexport default class Slide extends React.Component<Props, State> {\r\n  render() {\r\n    return <React.Fragment>{this.props.children}</React.Fragment>\r\n  }\r\n}\r\n","import React from 'react'\r\nimport './PeriodicElement.scss'\r\n\r\nexport interface Element {\r\n  number: number\r\n  name: string\r\n  symbol: string\r\n  atomic_mass: string\r\n  'cpk-hex': string\r\n  summary: string\r\n}\r\n\r\ninterface Props {\r\n  element: Element\r\n}\r\n\r\nexport function PeriodicElement(props: Props) {\r\n  return (\r\n    <div\r\n      className='element'\r\n      style={{ backgroundColor: '#' + props.element['cpk-hex'] }}\r\n    >\r\n      <div className='element__number'>{props.element.number}</div>\r\n      <div className='element__symbol'>{props.element.symbol}</div>\r\n      <div className='element__name'>{props.element.name}</div>\r\n      <div className='element__mass'>{props.element['atomic_mass']}</div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport './Tooltip.scss'\r\n\r\ninterface Props {\r\n  text: string\r\n}\r\n\r\nexport function Tooltip(props: Props) {\r\n  return (\r\n    <div className='tooltip'>\r\n      <div className='tooltip__text'>{props.text}</div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Carousel, Slide } from 'react-x-carousel'\r\nimport 'react-x-carousel/dist/index.css'\r\nimport {\r\n  PeriodicElement,\r\n  Element\r\n} from '../../components/PeriodicElement/PeriodicElement'\r\nimport { Tooltip } from '../../components/Tooltip/Tooltip'\r\nimport Slider from '@material-ui/core/Slider'\r\n\r\nimport './MainPage.scss'\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n  elements: Element[]\r\n  currentElement: Element\r\n  showTooltip: boolean\r\n}\r\n\r\ninterface Props {}\r\n\r\ninterface State {}\r\n\r\nclass MainPage extends React.Component<Props, State> {\r\n  constructor(props: any) {\r\n    super(props)\r\n\r\n    const { elements } = require('../../assets/periodic.json')\r\n    this.state = {\r\n      elements: elements.slice(0, 9),\r\n      currentElement: null,\r\n      showTooltip: false\r\n    }\r\n  }\r\n\r\n  handleChange = (node: any) => {\r\n    this.setState({\r\n      currentElement: node.value.item\r\n    })\r\n  }\r\n\r\n  onSliderChange = (event: object, value: number) => {\r\n    const { elements } = require('../../assets/periodic.json')\r\n    return this.setState((state, props) => ({\r\n      elements: elements.slice(0, value)\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='example-page'>\r\n        <section className='header'>\r\n          <div className='fork-me'>\r\n            <a href='https://github.com/munkk/react-x-carousel'></a>\r\n          </div>\r\n\r\n          <div className='header__inner'>\r\n            <div className='header__inner-title'>\r\n              Responsive <br></br> Linked list based <br></br> 3D Carousel\r\n            </div>\r\n            <div className='header__inner-frameworks'>\r\n              <div className='framework'>\r\n                <a href='/'>\r\n                  <i className='fab fa-angular'></i>\r\n                  <span>Angular</span>\r\n                </a>\r\n              </div>\r\n              <div className='framework'>\r\n                <a href='/'>\r\n                  <i className='fab fa-react'></i>\r\n                  <span>React</span>\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        <section className='body'>\r\n          <div className='body__inner'>\r\n            <div\r\n              className='body__inner-example'\r\n              onMouseEnter={() => this.setState({ showTooltip: true })}\r\n              onMouseLeave={() => this.setState({ showTooltip: false })}\r\n            >\r\n              {this.state.showTooltip && (\r\n                <Tooltip\r\n                  text={\r\n                    this.state.currentElement &&\r\n                    this.state.currentElement.summary\r\n                  }\r\n                />\r\n              )}\r\n\r\n              <Carousel\r\n                // onInit={instance => this.carousel = instance}\r\n                onChange={this.handleChange}\r\n              >\r\n                {this.state.elements.map((element, idx) => {\r\n                  return (\r\n                    <Slide data={element} key={element.name}>\r\n                      <PeriodicElement element={element} />\r\n                    </Slide>\r\n                  )\r\n                })}\r\n              </Carousel>\r\n            </div>\r\n\r\n            <Slider\r\n              className='material-slider'\r\n              defaultValue={this.state.elements.length}\r\n              valueLabelDisplay='auto'\r\n              step={1}\r\n              marks\r\n              min={1}\r\n              max={20}\r\n              onChange={this.onSliderChange}\r\n            />\r\n          </div>\r\n        </section>\r\n\r\n        <section className='footer'>\r\n          <Link to='/features'>See Examples</Link>\r\n        </section>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainPage\r\n","import React from 'react'\r\n\r\nimport './FeaturesPage.scss'\r\n\r\ninterface Props {}\r\n\r\ninterface State {}\r\n\r\nclass FeaturesPage extends React.Component<Props, State> {\r\n  constructor(props: any) {\r\n    super(props)\r\n  }\r\n\r\n  render() {\r\n    return <div className='features-page'>Features</div>\r\n  }\r\n}\r\n\r\nexport default FeaturesPage\r\n","import React from 'react'\nimport { HashRouter, Switch, Route } from 'react-router-dom'\n\nimport MainPage from './pages/MainPage/MainPage'\nimport FeaturesPage from './pages/FeaturesPage/FeaturesPage'\n\nimport './App.scss'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <HashRouter basename='/'>\n        <Switch>\n          <Route exact path='/' component={MainPage} />\n          <Route exact path='/features' component={FeaturesPage} />\n        </Switch>\n      </HashRouter>\n    )\n  }\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}