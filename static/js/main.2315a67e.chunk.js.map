{"version":3,"sources":["assets/cat-1.jpg","assets/cat-2.jpg","assets/cat-3.jpg","assets/cat-4.jpg","assets/cat-5.jpg","assets/cat-6.jpg","assets/cat-7.jpg","assets/cat-8.jpg","../../src/models/Node.tsx","../../src/models/LinkedList.tsx","../../src/models/Slide.tsx","../../src/components/Carousel/Carousel.tsx","../../src/shims/document.ts","../../src/components/Slide/Slide.tsx","App.tsx","index.tsx"],"names":["module","exports","Node","constructor","value","prev","next","this","LinkedList","Symbol","current","idx","newNode","length","popped","newTail","tail","shiftedNode","newHead","head","index","removedNode","after","getNodeAtIndex","before","currentIndex","currentNode","foundNode","Slide","id","item","element","classRemover","RegExp","whiteSpaceRemover","Carousel","props","list","theta","radius","cellsCount","moveRight","state","moveLeft","setSceneRef","node","setCarouselWrapperRef","setItemRef","handleLeftControlClick","handleRightControlClick","initialized","prevState","Children","slide","React","sceneRef","height","Math","width","ResizeObserver","entries","resizeObserver","cellAngle","getDocument","angle","setTimeout","centerNode","centerElement","counter","max","slideProps","ref","onClick","className","style","Component","items","name","weight","image","Image1","Image2","Image3","Image4","Image5","Image6","Image7","Image8","App","margin","onChange","console","log","map","data","key","src","alt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2315a67e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat-1.a94af3f6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cat-2.67dc0663.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cat-3.ecfd330f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cat-4.ec16d832.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cat-5.c89af1e9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cat-6.efc4ec2d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cat-7.d79f93f2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cat-8.bcb20e54.jpg\";","export default class Node {\r\n  value: any = null\r\n  prev: any = null\r\n  next: any = null\r\n\r\n  constructor(value: any) {\r\n    this.value = value\r\n    this.prev = null\r\n    this.next = null\r\n  }\r\n}\r\n","import Node from './Node'\r\n\r\nexport default class LinkedList implements Iterable<Node> {\r\n  public head: any\r\n  public tail: any\r\n  public length\r\n\r\n  constructor() {\r\n    this.head = null\r\n    this.tail = null\r\n    this.length = 0\r\n  }\r\n\r\n  *[Symbol.iterator]() {\r\n    let current = this.head\r\n    let idx = this.length\r\n\r\n    while (idx) {\r\n      yield current\r\n      current = current.next\r\n      idx--\r\n    }\r\n  }\r\n\r\n  push(val: any) {\r\n    const newNode = new Node(val)\r\n    if (!this.head) {\r\n      this.head = newNode\r\n      this.tail = newNode\r\n    } else {\r\n      this.tail.next = newNode\r\n      newNode.prev = this.tail\r\n      this.tail = newNode\r\n    }\r\n\r\n    this.length++\r\n    return this\r\n  }\r\n\r\n  connectTailWithHead() {\r\n    this.tail.next = this.head\r\n    this.head.prev = this.tail\r\n  }\r\n\r\n  pop() {\r\n    //in case of empty list\r\n    if (this.length === 0) {\r\n      return false\r\n    }\r\n    //get popped node\r\n    const popped = this.tail\r\n    //save newTail to a variable (could be null)\r\n    const newTail = this.tail.prev\r\n    //if newTail is not null\r\n    if (newTail) {\r\n      //sever connection to popped node\r\n      newTail.next = null\r\n      //sever connection from popped node\r\n      this.tail.prev = null\r\n      //in case of 1 length list\r\n    } else {\r\n      //make sure to edit head in case newTail is null\r\n      this.head = null\r\n    }\r\n    //assign new tail (could be null)\r\n    this.tail = newTail\r\n    // subtract length\r\n    this.length--\r\n\r\n    return popped\r\n  }\r\n\r\n  shift() {\r\n    //in case list is empty\r\n    if (!this.head) {\r\n      return false\r\n    }\r\n    //save shifted node to variable\r\n    const shiftedNode = this.head\r\n    //make the new head the next (might be null)\r\n    const newHead = this.head.next //might be null\r\n    //if list is more than 1\r\n    if (this.head !== this.tail) {\r\n      newHead.prev = null\r\n      shiftedNode.next = null\r\n    } else {\r\n      this.tail = null\r\n    }\r\n    this.head = newHead\r\n    this.length--\r\n    return shiftedNode\r\n  }\r\n\r\n  unshift(val: any) {\r\n    const newNode = new Node(val)\r\n    if (!this.head) {\r\n      this.head = newNode\r\n      this.tail = newNode\r\n    } else {\r\n      this.head.prev = newNode\r\n      newNode.next = this.head\r\n      this.head = newNode\r\n    }\r\n    this.length++\r\n    return this\r\n  }\r\n\r\n  // insertAtIndex(index, val) {\r\n  //     //if index doesn't exist\r\n  //     if (index > this.length) {\r\n  //         return false;\r\n  //     }\r\n  //     if (index === 0) {\r\n  //         this.unshift(val);\r\n  //     } else if (index === this.length) {\r\n  //         this.push(val);\r\n  //     } else {\r\n  //         const newNode = new Node(val);\r\n  //         const after = this.accessAtIndex(index);\r\n  //         const before = after.prev;\r\n  //         after.prev = newNode;\r\n  //         before.next = newNode;\r\n  //         newNode.next = after;\r\n  //         newNode.prev = before;\r\n  //         this.length++;\r\n  //     }\r\n  //     return this;\r\n  // }\r\n\r\n  removeAtIndex(index: number) {\r\n    let removedNode\r\n    if (index >= this.length) {\r\n      return false\r\n    }\r\n    if (index == 0) {\r\n      removedNode = this.shift()\r\n    } else if (index == this.length - 1) {\r\n      removedNode = this.pop()\r\n    } else {\r\n      removedNode = this.getNodeAtIndex(index)\r\n      const after = removedNode.next\r\n      const before = removedNode.prev\r\n      removedNode.next = null\r\n      removedNode.prev = null\r\n      before.next = after\r\n      after.prev = before\r\n      this.length--\r\n    }\r\n    return removedNode\r\n  }\r\n\r\n  getNodeAtIndex(index: number) {\r\n    if (index >= this.length || index < 0) {\r\n      return false\r\n    }\r\n    let currentIndex = 0\r\n    let currentNode = this.head\r\n    while (currentIndex !== index) {\r\n      currentNode = currentNode.next\r\n      currentIndex++\r\n    }\r\n    return currentNode\r\n  }\r\n\r\n  setNodeAtIndex(index: number, val: any) {\r\n    const foundNode = this.getNodeAtIndex(index)\r\n    if (foundNode) {\r\n      foundNode.value = val\r\n      return foundNode\r\n    }\r\n    return null\r\n  }\r\n}\r\n","export default class Slide {\r\n  id: number = null\r\n  item: any = null\r\n  element: any = null\r\n\r\n  constructor(id: number, item: any, element: any) {\r\n    this.id = id\r\n    this.item = item\r\n    this.element = element\r\n  }\r\n}\r\n","import React, { Children } from 'react'\r\n\r\nimport LinkedList from '../../models/LinkedList'\r\nimport Node from '../../models/Node'\r\nimport Slide from '../../models/Slide'\r\nimport getDocument from '../../shims/document'\r\n\r\nimport './Carousel.scss'\r\n\r\ndeclare var ResizeObserver: any\r\n\r\nconst classes = {\r\n  itemCurrent: 'x-current',\r\n  itemPast: 'x-prev',\r\n  itemFuture: 'x-next'\r\n}\r\n\r\nconst classRemover = new RegExp(\r\n  '\\\\b(' +\r\n    classes.itemCurrent +\r\n    '|' +\r\n    classes.itemPast +\r\n    '|' +\r\n    classes.itemFuture +\r\n    ')(.*?)(\\\\s|$)',\r\n  'g'\r\n)\r\n\r\nconst whiteSpaceRemover = new RegExp('\\\\s\\\\s+', 'g')\r\n\r\n// const noop = () => {}\r\n\r\ninterface Props {\r\n  cellSize?: number\r\n  autoPlay?: boolean\r\n  children?: React.ReactChild[]\r\n  useKeyboardArrows?: boolean\r\n  onChange?: (node: Node) => void\r\n}\r\n\r\ninterface State {\r\n  currentIndex: number\r\n  initialized: boolean\r\n}\r\n\r\nexport default class Carousel extends React.Component<Props, State> {\r\n  private carouselWrapperRef?: HTMLDivElement\r\n  private sceneRef?: HTMLDivElement\r\n\r\n  list = new LinkedList()\r\n  theta: number = 0\r\n  radius: number = 0\r\n  cellsCount: number = 0\r\n\r\n  constructor(props: Props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      currentIndex: 0,\r\n      initialized: false\r\n    }\r\n\r\n    this.buildList()\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ initialized: true })\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props, prevState: State) {\r\n    if (!prevState.initialized && this.state.initialized) {\r\n      this.calculateDimension()\r\n      this.setResizeListener()\r\n      this.changeCarousel()\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.destroyCarousel()\r\n  }\r\n\r\n  buildList() {\r\n    if (!this.props.children) return\r\n\r\n    Children.map(this.props.children, (item: any, index) => {\r\n      const slide = new Slide(index, item.props.data, React.createRef())\r\n      this.list.push(slide)\r\n    })\r\n\r\n    this.list.connectTailWithHead()\r\n  }\r\n\r\n  calculateDimension() {\r\n    if (!this.sceneRef) return\r\n\r\n    const { width, height } = this.sceneRef.getBoundingClientRect()\r\n\r\n    this.cellsCount = Children.count(this.props.children) || 0\r\n    this.theta = 360 / this.cellsCount\r\n    this.radius = Math.round(width / 2 / Math.tan(Math.PI / this.cellsCount))\r\n  }\r\n\r\n  setResizeListener() {\r\n    const resizeObserver = new ResizeObserver((entries: any) => {\r\n      entries.forEach(() => {\r\n        this.calculateDimension()\r\n        this.changeCarousel()\r\n        this.forceUpdate()\r\n      })\r\n    })\r\n\r\n    resizeObserver.observe(this.sceneRef)\r\n  }\r\n\r\n  changeCarousel() {\r\n    if (!this.list.length) return\r\n\r\n    let currentNode = this.list.getNodeAtIndex(0)\r\n    while (true) {\r\n      const cellAngle = this.theta * currentNode.value.id\r\n      currentNode.value.element.style.transform =\r\n        'rotateY' + '(' + cellAngle + 'deg) translateZ(' + this.radius + 'px)'\r\n\r\n      if (currentNode.value.id === this.list.length - 1) break\r\n\r\n      currentNode = currentNode.next\r\n    }\r\n\r\n    this.rotateCarousel()\r\n  }\r\n\r\n  moveRight = () => {\r\n    this.setState(\r\n      function (state, props) {\r\n        return {\r\n          currentIndex: state.currentIndex + 1\r\n        }\r\n      },\r\n      () => {\r\n        this.rotateCarousel()\r\n      }\r\n    )\r\n  }\r\n\r\n  moveLeft = () => {\r\n    this.setState(\r\n      function (state, props) {\r\n        return {\r\n          currentIndex: state.currentIndex - 1\r\n        }\r\n      },\r\n      () => {\r\n        this.rotateCarousel()\r\n      }\r\n    )\r\n  }\r\n\r\n  bindEvents() {\r\n    if (this.props.useKeyboardArrows) {\r\n      getDocument().addEventListener('keydown', this.navigateWithKeyboard)\r\n    }\r\n  }\r\n\r\n  navigateWithKeyboard() {}\r\n\r\n  destroyCarousel() {}\r\n\r\n  rotateCarousel() {\r\n    if (!this.carouselWrapperRef) return\r\n\r\n    const angle = this.theta * this.state.currentIndex * -1\r\n    this.carouselWrapperRef.style.transform =\r\n      'translateZ(' + -this.radius + 'px) ' + 'rotateY' + '(' + angle + 'deg)'\r\n\r\n    //fix initial animation\r\n    setTimeout(\r\n      () => (this.carouselWrapperRef.style.transition = 'transform 1s'),\r\n      0\r\n    )\r\n\r\n    this.updateClassList()\r\n    this.props.onChange(this.getCurrentNode())\r\n  }\r\n\r\n  setSceneRef = (node: HTMLDivElement) => {\r\n    this.sceneRef = node\r\n  }\r\n\r\n  setCarouselWrapperRef = (node: HTMLDivElement) => {\r\n    this.carouselWrapperRef = node\r\n  }\r\n\r\n  setItemRef = (element: HTMLElement, index: number) => {\r\n    const node = this.list.getNodeAtIndex(index)\r\n    node.value.element = element\r\n  }\r\n\r\n  getActualIndex() {\r\n    return Math.sign(this.state.currentIndex) < 0\r\n      ? this.list.length - Math.abs(this.state.currentIndex)\r\n      : this.state.currentIndex % this.list.length\r\n  }\r\n\r\n  getCurrentNode() {\r\n    const idx = this.getActualIndex()\r\n\r\n    return this.list.getNodeAtIndex(idx)\r\n  }\r\n\r\n  handleClickItem(node: Node, index: number) {}\r\n\r\n  handleLeftControlClick = () => {\r\n    this.moveLeft()\r\n  }\r\n\r\n  handleRightControlClick = () => {\r\n    this.moveRight()\r\n  }\r\n\r\n  removeExtraClasses(element: any) {\r\n    return (element.className = element.className\r\n      .replace(classRemover, '')\r\n      .replace(whiteSpaceRemover, ' '))\r\n  }\r\n\r\n  updateClassList() {\r\n    const centerNode = this.getCurrentNode()\r\n    const centerElement = centerNode.value.element\r\n\r\n    this.removeExtraClasses(centerElement)\r\n    centerElement.classList.add('x-current')\r\n\r\n    let counter = 0\r\n    const max = Math.floor(this.list.length / 2)\r\n    let currentNode = centerNode\r\n    while (counter < max) {\r\n      const element = currentNode.next.value.element\r\n      this.removeExtraClasses(element)\r\n      element.classList.add('x-next-' + counter)\r\n      currentNode = currentNode.next\r\n      counter++\r\n    }\r\n\r\n    counter = 0\r\n    currentNode = centerNode\r\n    while (counter < max) {\r\n      const element = currentNode.prev.value.element\r\n      this.removeExtraClasses(element)\r\n      element.classList.add('x-prev-' + counter)\r\n      currentNode = currentNode.prev\r\n      counter++\r\n    }\r\n  }\r\n\r\n  //RENDER\r\n\r\n  renderItems() {\r\n    if (!this.props.children || !this.sceneRef) return\r\n\r\n    const { width, height } = this.sceneRef.getBoundingClientRect()\r\n\r\n    return Children.map(this.props.children, (node, index) => {\r\n      const slideProps = {\r\n        ref: (element: HTMLDivElement) => this.setItemRef(element, index),\r\n        onClick: this.handleClickItem.bind(this, node, index),\r\n        className: 'x-carousel__slide',\r\n        style: { width: width + 'px', height: height + 'px' }\r\n      }\r\n\r\n      return <div {...slideProps}>{node}</div>\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='x-scene' ref={this.setSceneRef}>\r\n        <div className='x-carousel' ref={this.setCarouselWrapperRef}>\r\n          {this.renderItems()}\r\n        </div>\r\n        <div\r\n          className='x-scene-lcontrol'\r\n          onClick={this.handleLeftControlClick}\r\n        ></div>\r\n        <div\r\n          className='x-scene-rcontrol'\r\n          onClick={this.handleRightControlClick}\r\n        ></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export default () => document;","import React, { Children } from 'react'\r\n\r\nimport './Slide.scss'\r\n\r\ninterface Props {\r\n  data: any\r\n}\r\n\r\ninterface State {}\r\n\r\nexport default class Slide extends React.Component<Props, State> {\r\n  render() {\r\n    return <React.Fragment>{this.props.children}</React.Fragment>\r\n  }\r\n}\r\n","import React from 'react'\n\nimport { Carousel, Slide } from 'react-x-carousel'\n\nimport 'react-x-carousel/dist/index.css'\nimport Image1 from './assets/cat-1.jpg'\nimport Image2 from './assets/cat-2.jpg'\nimport Image3 from './assets/cat-3.jpg'\nimport Image4 from './assets/cat-4.jpg'\nimport Image5 from './assets/cat-5.jpg'\nimport Image6 from './assets/cat-6.jpg'\nimport Image7 from './assets/cat-7.jpg'\nimport Image8 from './assets/cat-8.jpg'\n\nconst items = [\n  {\n    name: 'Charlie',\n    weight: '3.6',\n    image: Image1\n  },\n  {\n    name: 'Oscar',\n    weight: '4.0',\n    image: Image2\n  },\n  {\n    name: 'Alfie',\n    weight: '7.2',\n    image: Image3\n  },\n  {\n    name: 'Max',\n    weight: '3.8',\n    image: Image4\n  },\n  {\n    name: 'Milo',\n    weight: '5.3',\n    image: Image5\n  },\n  {\n    name: 'Jasper',\n    weight: '4.1',\n    image: Image6\n  },\n  {\n    name: 'George',\n    weight: '3.0',\n    image: Image7\n  },\n  {\n    name: 'Leo',\n    weight: '3.9',\n    image: Image8\n  }\n]\n\nfunction App() {\n  const handleChange = function (node: any) {\n    console.log(node)\n  }\n\n  return (\n    <div className='App'>\n      <div style={{ width: '40%', height: '400px', margin: '200px auto 0' }}>\n        <Carousel onChange={handleChange}>\n          {items.map((item, idx) => {\n            return (\n              <Slide data={item} key={idx}>\n                <img src={item.image} alt='space' />\n              </Slide>\n            )\n          })}\n        </Carousel>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}